
import { serve } from "https://deno.land/std@0.168.0/http/server.ts"
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2.7.1'
import "https://deno.land/x/xhr@0.1.0/mod.ts"

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
}

serve(async (req) => {
  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    return new Response('ok', { headers: corsHeaders })
  }

  try {
    // Initialize Supabase client
    const supabase = createClient(
      Deno.env.get('SUPABASE_URL') || '',
      Deno.env.get('SUPABASE_SERVICE_ROLE_KEY') || ''
    )

    // Parse request body
    const { imageUrl, userId, responseType = 'image/png' } = await req.json()

    if (!imageUrl || !userId) {
      return new Response(
        JSON.stringify({ error: 'Missing imageUrl or userId' }), 
        { status: 400, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
      )
    }

    console.log('Processing avatar generation for user:', userId)
    console.log('Image URL:', imageUrl)
    console.log('Response type requested:', responseType)

    // Extract path from the imageUrl
    const urlParts = imageUrl.split('/storage/v1/object/public/')
    if (urlParts.length < 2) {
      throw new Error('Invalid image URL format')
    }
    
    const pathParts = urlParts[1].split('/')
    const bucketName = pathParts[0]
    const imagePath = pathParts.slice(1).join('/')
    
    console.log('Extracted bucket name:', bucketName)
    console.log('Extracted image path:', imagePath)

    // Download the original image
    const { data: fileData, error: downloadError } = await supabase
      .storage
      .from(bucketName)
      .download(imagePath)
    
    if (downloadError) {
      console.error('Error downloading file:', downloadError)
      throw downloadError
    }
    
    console.log('Original file downloaded successfully')
    
    // Convert the file to base64 for sending to Gemini
    const imageBuffer = await fileData.arrayBuffer()
    const bytes = new Uint8Array(imageBuffer)
    const binary = Array.from(bytes).map(byte => String.fromCharCode(byte)).join('')
    const imageBase64 = btoa(binary)
    
    console.log('Image converted to base64')

    // Call Gemini API to generate avatar
    const GEMINI_API_KEY = Deno.env.get('GEMINI_API_KEY')
    if (!GEMINI_API_KEY) {
      throw new Error('GEMINI_API_KEY is not set')
    }

    console.log('Calling Gemini API for image generation')
    
    // Updated fetch call based on the new example
    const geminiResponse = await fetch(`https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash-exp-image-generation:generateContent?key=${GEMINI_API_KEY}`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        contents: [{
          parts: [
            {
              text: "Create a standardized avatar of this person's full body against a neutral background. Keep the same facial features but standardize the pose to be standing straight, facing forward with a neutral expression. Use neutral colored clothing. The image should be in a portrait orientation and include the full body from head to toe."
            },
            {
              inlineData: {
                mimeType: "image/jpeg",
                data: imageBase64
              }
            }
          ]
        }],
        generationConfig: {
          temperature: 0.0,
          topK: 1,
          topP: 0,
          maxOutputTokens: 8192,
        },
        config: {
          responseModalities: ["Text", "Image"]
        }
      })
    });

    if (!geminiResponse.ok) {
      const errorText = await geminiResponse.text();
      console.error('Gemini API error response:', errorText);
      console.error('Gemini API HTTP status:', geminiResponse.status);
      throw new Error(`Gemini API error: ${geminiResponse.status} - ${errorText}`);
    }
    
    const geminiData = await geminiResponse.json();
    console.log('Gemini API response received');
    
    // Extract image data from Gemini response
    let generatedImageBase64 = null;
    
    if (geminiData.candidates && geminiData.candidates.length > 0) {
      const candidate = geminiData.candidates[0];
      if (candidate.content && candidate.content.parts) {
        for (const part of candidate.content.parts) {
          // Check for inlineData which contains the image
          if (part.inlineData) {
            generatedImageBase64 = part.inlineData.data;
            console.log('Found image in Gemini response with mime type:', part.inlineData.mimeType);
            break;
          }
        }
      }
    }
    
    if (!generatedImageBase64) {
      console.error('No image found in Gemini response:', JSON.stringify(geminiData));
      throw new Error('No image generated by Gemini');
    }

    // Convert base64 to blob for upload
    const binaryData = atob(generatedImageBase64);
    const array = new Uint8Array(binaryData.length);
    for (let i = 0; i < binaryData.length; i++) {
      array[i] = binaryData.charCodeAt(i);
    }
    const imageBlob = new Blob([array], { type: responseType });
    
    // Define paths for storing the avatar
    const userFolder = `user-${userId}`;
    const avatarFileName = `${Date.now()}.${responseType.split('/')[1]}`;
    const avatarPath = `${userFolder}/${avatarFileName}`;
    
    // Upload the generated image to the avatars bucket
    const { data: uploadData, error: uploadError } = await supabase
      .storage
      .from('avatars')
      .upload(avatarPath, imageBlob, {
        contentType: responseType,
        upsert: true
      });

    if (uploadError) {
      console.error('Error uploading avatar:', uploadError);
      throw uploadError;
    }

    console.log('Avatar uploaded successfully');

    // Get the public URL for the uploaded avatar
    const { data: { publicUrl } } = supabase.storage
      .from('avatars')
      .getPublicUrl(avatarPath);

    // Store metadata in user_avatars table
    const { data: metadataData, error: metadataError } = await supabase
      .from('user_avatars')
      .insert({
        user_id: userId,
        original_image_path: `${bucketName}/${imagePath}`,
        avatar_image_path: `avatars/${avatarPath}`
      })
      .select();

    if (metadataError) {
      console.error('Error storing avatar metadata:', metadataError);
      throw metadataError;
    }

    console.log('Avatar metadata stored successfully');
    console.log('Avatar stored at:', publicUrl);

    return new Response(
      JSON.stringify({ 
        avatarUrl: publicUrl,
        avatarId: metadataData?.[0]?.id
      }), 
      { headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
    );
  } catch (error) {
    console.error('Avatar generation error:', error);
    
    // If something fails during Gemini image generation, we'll fall back to the original image
    try {
      // Extract information from the error to determine if we should fall back
      const shouldFallback = true; // We'll always fall back for now
      
      if (shouldFallback) {
        console.log('Falling back to original image as avatar');
        
        // Try to parse the original request again to get imageUrl and userId
        const { imageUrl, userId, responseType = 'image/png' } = await req.json();
        
        // Extract path from the imageUrl again
        const urlParts = imageUrl.split('/storage/v1/object/public/');
        const pathParts = urlParts[1].split('/');
        const bucketName = pathParts[0];
        const imagePath = pathParts.slice(1).join('/');
        
        // Download the original image
        const supabase = createClient(
          Deno.env.get('SUPABASE_URL') || '',
          Deno.env.get('SUPABASE_SERVICE_ROLE_KEY') || ''
        );
        
        const { data: fileData } = await supabase
          .storage
          .from(bucketName)
          .download(imagePath);
        
        if (!fileData) {
          throw new Error('Failed to download original image for fallback');
        }
        
        // Define paths for storing the avatar
        const userFolder = `user-${userId}`;
        const avatarFileName = `${Date.now()}.${responseType.split('/')[1]}`;
        const avatarPath = `${userFolder}/${avatarFileName}`;
        
        // Upload the original image as avatar
        const { error: uploadError } = await supabase
          .storage
          .from('avatars')
          .upload(avatarPath, fileData, {
            contentType: responseType,
            upsert: true
          });

        if (uploadError) {
          throw uploadError;
        }

        // Get the public URL for the uploaded avatar
        const { data: { publicUrl } } = supabase.storage
          .from('avatars')
          .getPublicUrl(avatarPath);

        // Store metadata in user_avatars table
        const { data: metadataData, error: metadataError } = await supabase
          .from('user_avatars')
          .insert({
            user_id: userId,
            original_image_path: `${bucketName}/${imagePath}`,
            avatar_image_path: `avatars/${avatarPath}`
          })
          .select();

        if (metadataError) {
          throw metadataError;
        }

        return new Response(
          JSON.stringify({ 
            avatarUrl: publicUrl,
            avatarId: metadataData?.[0]?.id,
            note: "Using original image as avatar due to generation error"
          }), 
          { headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
        );
      }
    } catch (fallbackError) {
      console.error('Error in fallback logic:', fallbackError);
    }
    
    // If we get here, both the main flow and fallback have failed
    return new Response(
      JSON.stringify({ error: error.message }), 
      { status: 500, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
    );
  }
});
